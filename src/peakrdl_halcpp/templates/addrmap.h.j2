{# Get the header for the generate file (e.g, date and time of generation, by whom) #}
{{ halutils.generate_file_header() }}

{#- Add the header guards #}
#ifndef __{{ halnode.inst_name|upper }}_H_
#define __{{ halnode.inst_name|upper }}_H_

#include <stdint.h>
#include "include/halcpp_base.h"

#if defined(__clang__)
#pragma clang diagnostic ignored "-Wundefined-var-template"
#endif

{# Include the child nodes (i.e., the child addrmap ndoes) #}
{% for c in halutils.get_unique_type_nodes(halnode.addrmaps) %}
#include "{{ halutils.get_include_file(c) }}"
{% endfor -%}

namespace {{ halnode.inst_name}}_nm
{
    {#- ======== 1. Generate the registers ======== #}
    {%- for r in halutils.get_unique_type_nodes(halnode.regs + halnode.get_regfiles_regs()) %}

    {# ======== 1.a Generate the enumeration class ======== #}
    {% for f in r.fields %}
    {% set has_enum, enum_name, enum_strings, enum_values, enum_desc, const_width = halutils.get_node_enum(f) %}
    {% if has_enum %}
    class {{ enum_name }}
    {
    public:
    {% for  s, v, d in enum_strings|zip(enum_values, enum_desc) %}
        static const halcpp::Const<{{ const_width }}, {{ v }}> {{ s }}; // {{ d }}
    {% endfor %}
    };
    {% endif %}
    {% endfor %}

    {# ======== 1.b Generate the register class ======== #}
    {{ r.get_docstring() | indent(4)}}
    {{ r.get_template_line() }}
    class {{ r.inst_name|upper }} : public halcpp::{{ r.cpp_access_type }}{{ r.get_cls_tmpl_params() }}
    {
    public:
        using TYPE = {{ r.inst_name|upper }}{{ r.get_cls_tmpl_params() }};

    {# Add the fields to the register #}
    {% for f in r.fields %}
        static halcpp::{{ f.cpp_access_type }}<{{ f._node.low }}, {{ f._node.high }}, TYPE> {{ f._node.inst_name }};
    {% endfor %}
    {# Inherit the overloaded '=' operator from the base class if register can be write from software #}
    {% if r._node.has_sw_writable %}

        using halcpp::{{ r.cpp_access_type }}{{ r.get_cls_tmpl_params() }}::operator=;
    {% endif %}
    };
    {% endfor %}

    {# ======== 2. Generate the register file classes ======== #}
    {% for rf in halnode.regfiles %}
    {{ rf.get_docstring() }}
    {{ rf.get_template_line() }}
    class {{ rf.inst_name|upper }} : public halcpp::{{ rf.cpp_access_type }}{{ rf.get_cls_tmpl_params()}}
    {
    public:
        using TYPE = {{ rf.inst_name|upper }}{{ rf.get_cls_tmpl_params() }};

    {% for c in rf.regfiles + rf.regs %}
        {% if c.__class__.__name__ == "HalRegfile" %}
            {{ assert("Regfile inside Regfile Not supported yet") }}
        {% else %}
        static {{ c.inst_name|upper }}<0x{{ "%0x"|format(c.addr_offset|int) }}, {{ c.width }}, TYPE> {{ c._node.inst_name }};
        {% endif %}
    {% endfor %}
    };
    {% endfor %}

    {# ======== 3. Generate the memory classes ======== #}
    {% for m in halutils.get_unique_type_nodes(halnode.mems) %}
    {{ m.get_template_line() }}
    class {{ m.inst_name|upper }} : public MemNode{{ m.get_cls_tmpl_params() }}
    {

    };
    {% endfor %}
}

{# ======== 4. Generate the top HAL class of an addrmap component ======== #}
{{ halnode.get_docstring() }}
{{ halnode.get_template_line() }}
class {{ halnode.inst_name|upper }} : public AddrmapNode<BASE, PARENT_TYPE>
{
public:
    using TYPE = {{ halnode.inst_name|upper () }}{{ halnode.get_cls_tmpl_params() }};

{% for c in halnode.addrmaps + halnode.regs + halnode.mems + halnode.regfiles %}
    {% if c.__class__.__name__ == "HalArrReg" %}
    static halcpp::RegArrayNode<{{ halnode.inst_name }}_nm::{{ c.inst_name|upper }}, 0x{{ "%0x"|format(c.addr_offset|int) }}, {{ c.width }}, {{ c._node.array_stride }}, TYPE , {{ c._node.array_dimensions|join(', ') }}> {{ c._node.inst_name }};
    {% elif c.__class__.__name__ == "HalReg" or c.__class__.__name__ == "HalMem" %}
    static {{ halnode.inst_name }}_nm::{{ c.inst_name|upper }}<0x{{ "%0x"|format(c.addr_offset|int) }}, {{ c.width }}, TYPE> {{ c._node.inst_name }};
    {% elif c.__class__.__name__ == "HalArrRegfile" %}
    static halcpp::RegfileArrayNode<{{ halnode.inst_name }}_nm::{{ c.inst_name|upper }}, 0x{{ "%0x"|format(c.addr_offset|int) }}, {{ c._node.array_stride }}, TYPE , {{ c._node.array_dimensions|join(', ') }}> {{ c._node.inst_name }};
    {% elif c.__class__.__name__ == "HalRegfile" %}
    static {{ halnode.inst_name }}_nm::{{ halutils.get_extern(c)|upper }}<0x{{ "%0x"|format(c.addr_offset|int) }}, TYPE> {{ c._node.inst_name }};
    {% else %}
    static {{ halutils.get_extern(c)|upper }}<0x{{ "%0x"|format(c.addr_offset|int) }}, TYPE> {{ c._node.inst_name }};
    {% endif %}
{% endfor %}
};

#endif // !__{{ halnode.inst_name|upper }}_H_

